// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bcfoverparRcppClean
List bcfoverparRcppClean(NumericVector y_, NumericVector z_, NumericVector w_, NumericVector x_con_, NumericVector x_mod_, List x_con_info_list, List x_mod_info_list, int burn, int nd, int thin, int ntree_mod, int ntree_con, double lambda, double nu, double con_sd, double mod_sd, double con_alpha, double con_beta, double mod_alpha, double mod_beta, CharacterVector treef_con_name_, CharacterVector treef_mod_name_, int status_interval, bool RJ, bool use_mscale, bool use_bscale, bool b_half_normal, bool randeff, int batch_size, double acceptance_target, double trt_init, int verbose, bool block_v_rho, int block_batch_size, bool block_b0_b1, double sigu_hyperprior, double sigv_hyperprior, bool hardcode_sigma_u, bool hardcode_sigma_v, bool hardcode_rho, double hardcode_sigma_u_val, double hardcode_sigma_v_val, double hardcode_rho_val);
RcppExport SEXP _bcf_bcfoverparRcppClean(SEXP y_SEXP, SEXP z_SEXP, SEXP w_SEXP, SEXP x_con_SEXP, SEXP x_mod_SEXP, SEXP x_con_info_listSEXP, SEXP x_mod_info_listSEXP, SEXP burnSEXP, SEXP ndSEXP, SEXP thinSEXP, SEXP ntree_modSEXP, SEXP ntree_conSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP con_sdSEXP, SEXP mod_sdSEXP, SEXP con_alphaSEXP, SEXP con_betaSEXP, SEXP mod_alphaSEXP, SEXP mod_betaSEXP, SEXP treef_con_name_SEXP, SEXP treef_mod_name_SEXP, SEXP status_intervalSEXP, SEXP RJSEXP, SEXP use_mscaleSEXP, SEXP use_bscaleSEXP, SEXP b_half_normalSEXP, SEXP randeffSEXP, SEXP batch_sizeSEXP, SEXP acceptance_targetSEXP, SEXP trt_initSEXP, SEXP verboseSEXP, SEXP block_v_rhoSEXP, SEXP block_batch_sizeSEXP, SEXP block_b0_b1SEXP, SEXP sigu_hyperpriorSEXP, SEXP sigv_hyperpriorSEXP, SEXP hardcode_sigma_uSEXP, SEXP hardcode_sigma_vSEXP, SEXP hardcode_rhoSEXP, SEXP hardcode_sigma_u_valSEXP, SEXP hardcode_sigma_v_valSEXP, SEXP hardcode_rho_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z_(z_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_(w_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_con_(x_con_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_mod_(x_mod_SEXP);
    Rcpp::traits::input_parameter< List >::type x_con_info_list(x_con_info_listSEXP);
    Rcpp::traits::input_parameter< List >::type x_mod_info_list(x_mod_info_listSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_mod(ntree_modSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_con(ntree_conSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type con_sd(con_sdSEXP);
    Rcpp::traits::input_parameter< double >::type mod_sd(mod_sdSEXP);
    Rcpp::traits::input_parameter< double >::type con_alpha(con_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type con_beta(con_betaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_alpha(mod_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_beta(mod_betaSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_con_name_(treef_con_name_SEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_mod_name_(treef_mod_name_SEXP);
    Rcpp::traits::input_parameter< int >::type status_interval(status_intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type RJ(RJSEXP);
    Rcpp::traits::input_parameter< bool >::type use_mscale(use_mscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type use_bscale(use_bscaleSEXP);
    Rcpp::traits::input_parameter< bool >::type b_half_normal(b_half_normalSEXP);
    Rcpp::traits::input_parameter< bool >::type randeff(randeffSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type acceptance_target(acceptance_targetSEXP);
    Rcpp::traits::input_parameter< double >::type trt_init(trt_initSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type block_v_rho(block_v_rhoSEXP);
    Rcpp::traits::input_parameter< int >::type block_batch_size(block_batch_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type block_b0_b1(block_b0_b1SEXP);
    Rcpp::traits::input_parameter< double >::type sigu_hyperprior(sigu_hyperpriorSEXP);
    Rcpp::traits::input_parameter< double >::type sigv_hyperprior(sigv_hyperpriorSEXP);
    Rcpp::traits::input_parameter< bool >::type hardcode_sigma_u(hardcode_sigma_uSEXP);
    Rcpp::traits::input_parameter< bool >::type hardcode_sigma_v(hardcode_sigma_vSEXP);
    Rcpp::traits::input_parameter< bool >::type hardcode_rho(hardcode_rhoSEXP);
    Rcpp::traits::input_parameter< double >::type hardcode_sigma_u_val(hardcode_sigma_u_valSEXP);
    Rcpp::traits::input_parameter< double >::type hardcode_sigma_v_val(hardcode_sigma_v_valSEXP);
    Rcpp::traits::input_parameter< double >::type hardcode_rho_val(hardcode_rho_valSEXP);
    rcpp_result_gen = Rcpp::wrap(bcfoverparRcppClean(y_, z_, w_, x_con_, x_mod_, x_con_info_list, x_mod_info_list, burn, nd, thin, ntree_mod, ntree_con, lambda, nu, con_sd, mod_sd, con_alpha, con_beta, mod_alpha, mod_beta, treef_con_name_, treef_mod_name_, status_interval, RJ, use_mscale, use_bscale, b_half_normal, randeff, batch_size, acceptance_target, trt_init, verbose, block_v_rho, block_batch_size, block_b0_b1, sigu_hyperprior, sigv_hyperprior, hardcode_sigma_u, hardcode_sigma_v, hardcode_rho, hardcode_sigma_u_val, hardcode_sigma_v_val, hardcode_rho_val));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_TreeSamples();

static const R_CallMethodDef CallEntries[] = {
    {"_bcf_bcfoverparRcppClean", (DL_FUNC) &_bcf_bcfoverparRcppClean, 43},
    {"_rcpp_module_boot_TreeSamples", (DL_FUNC) &_rcpp_module_boot_TreeSamples, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_bcf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
